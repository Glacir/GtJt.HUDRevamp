global function Cl_PSG_Detector_Init
global function GetPSG_State
global function GetPSG_Message

const float PS_THRESHOLD = 0.061

struct
{
	table< string, float > NextPSTime
	table< string, float > LastPSEnd
	table< string, float > LastPSStart
	table< string, float > PSGlitching
	table< string, bool > PhaseShifting
	table< string, bool > Initialized
	bool running
} file

void function Cl_PSG_Detector_Init()
{
	RegisterSignal( "LocalPlayerDisconnected" )
	RegisterSignal( "StopPsgMonitor" )
	AddCallback_OnPlayerConnected( PlayerJoinTheGame )
	AddCallback_GameStateEnter( eGameState.Playing, OnEnterPlaying )
	AddCallback_GameStateEnter( eGameState.Epilogue, StopPsgMonitor )
	AddCallback_OnPlayerDisconnected( PlayerDisconnected )
	file.running = false
}

void function OnEnterPlaying()
{
	if (GameRules_GetGameMode() != FD)
	{
		return
	}
	ClearStatus()
	foreach( entity player in GetPlayerArray() )
	{
		if (!IsValid( player ) || player == null)
			continue
		InitPlayerStatus( player )
	}
	if (!file.running)
	{
		file.running = true
		thread PSG_Monitor( GetLocalViewPlayer() )
	}
}

void function PlayerJoinTheGame( entity player, int state )
{
	InitPlayerStatus( player )
}

void function PlayerDisconnected( entity player )
{
	if (!IsValid( player ) || player == null || GetLocalViewPlayer() == null || !file.running)
		return
	if ( player == GetLocalViewPlayer() || player.GetPlayerName() == GetLocalViewPlayer().GetPlayerName() )
	{
		file.running = false
		printt("#################")
		printt("LocalPlayerDisconnected")
		printt("#################")
		player.Signal( "LocalPlayerDisconnected" )
	}
}

void function StopPsgMonitor()
{
	entity player = GetLocalViewPlayer()
	if (IsValid(player) && file.running)
	{
		file.running = false
		printt("#################")
		printt("StopPsgMonitor")
		printt("#################")
		player.Signal( "StopPsgMonitor" )
	}
}

void function PSG_Monitor( entity player )
{

	player.EndSignal( "StopPsgMonitor" )
	player.EndSignal( "LocalPlayerDisconnected" )

	while(true)
	{
		foreach ( entity currentPlayer in GetPlayerArray() ) {
			CheckPlayer( currentPlayer )
		}
		WaitFrame()
	}
}

void function CheckPlayer( entity player )
{
	if ( IsValid( player ) && player.IsPlayer() )
	{
		string pname = player.GetPlayerName()
		if ( !( pname in file.Initialized ) )
		{
			return
		}
		if ( IsAlive( player ) )
		{
			if( player.IsPhaseShifted() )
			{
				if (file.PhaseShifting[ pname ])
					return

				float PSRemainingTime = player.PhaseShiftTimeRemaining()
				if (PSRemainingTime < 0.1)
				{
					printt(format("Unexpected PS Time %s %.6f", pname, PSRemainingTime))
					return // Sometimes exits PS but Still have a bit remaining time
				}

				printt(pname + " starts phase shift--------------------------------------------")
				float curTime = Time()
				file.PhaseShifting[ pname ] <- true
				float estimatedStartTime = curTime - player.PhaseShiftTimePassed()
				if ( estimatedStartTime < file.NextPSTime[ pname ])
				{
					file.PSGlitching[ pname ] <- 0.6
					printt(" BUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n" +player.GetPlayerName()+"\nNextPSTime")
					printt("curTime estimatedStartTime nextPSTime")
					printt(format("%.6f %.6f %.6f", curTime, estimatedStartTime, file.NextPSTime[ pname ]) )
					printt(format("estimatedStartTime - file.NextPSTime %.6f < 0", estimatedStartTime - file.NextPSTime[ pname ]))
				}
				else
				{
					printt(format("estimatedStartTime - file.NextPSTime %.6f", estimatedStartTime - file.NextPSTime[ pname ]))
				}
				if (fabs(estimatedStartTime - file.LastPSEnd[ pname ]) < 0.05)
				{
					file.PSGlitching[ pname ] <- 0.6
					printt(" BUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n" +player.GetPlayerName()+"\n Gap between PS")
					printt("curTime estimatedStartTime nextPSTime")
					printt(format("%.6f %.6f %.6f", curTime, estimatedStartTime, file.LastPSEnd[ pname ]) )
					printt(format("|estimatedStartTime - file.LastPSEnd| %.6f < 0.05", estimatedStartTime - file.LastPSEnd[ pname ]))
				}
				else
				{
					printt(format("estimatedStartTime - file.LastPSEnd %.6f", estimatedStartTime - file.LastPSEnd[ pname ]))
				}

				file.NextPSTime[ pname ] <- estimatedStartTime + GetEstimatePSThreshold(player)
				file.LastPSStart[ pname ] <- estimatedStartTime
				printt("curTime estimatedStartTime remaining end")
				printt(format("%.6f %.6f %.6f %.6f", curTime, estimatedStartTime, PSRemainingTime, curTime + PSRemainingTime) )
			}
			else if ( file.PhaseShifting[ pname ] )
			{
				float curTime = Time()
				float expectedDuration = file.NextPSTime[ pname ] - file.LastPSStart[ pname ] - PS_THRESHOLD
				float realDuration = curTime - file.LastPSStart[ pname ]
				file.PhaseShifting[ pname ] <- false
				file.LastPSEnd[ pname ] <- curTime
				if ( curTime < file.NextPSTime[ pname ] - PS_THRESHOLD && player.IsTitan())
				{
					printt(pname + " unexpected phase shift exit")
					file.NextPSTime[ pname ] <- curTime + 0.05 // prevent unexpected exit
				}
				printt(pname + " exits phase shift--------------------------------------------")
				printt(format("%.6f %.6f", curTime, file.NextPSTime[ pname ]) )
				printt(format("time in ps %.6f", curTime - file.LastPSStart[ pname ]))

				if (realDuration - expectedDuration > 0.4)
				{
					file.PSGlitching[ pname ] <- 1.0
					printt(" BUG!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n" +player.GetPlayerName()+"\n Suspicious PS duration")
					printt("realDuration expectedDuration")
					printt(format("%.6f %.6f", realDuration, expectedDuration))
				}
			}
		}
		else if ( file.PSGlitching[ pname ] > 0.5 || file.PhaseShifting[ pname ] )
		{
			file.PSGlitching[ pname ] <- 0.0
			file.PhaseShifting[ pname ] <- false
		}
	}
}

void function InitPlayerStatus( entity player )
{
	string pname = player.GetPlayerName()
	file.NextPSTime[ pname ] <- 0.0
	file.PSGlitching[ pname ] <- 0.0
	file.PhaseShifting[ pname ] <- false
	file.Initialized[ pname ]<- true
	file.LastPSEnd[ pname ] <- -100.0
	file.LastPSStart[ pname ] <- 99999.0
	printt("Start monitoring " + player.GetPlayerName() + " #####################################################")
}

float function GetEstimatePSThreshold( entity player ) {
	if (!(player.IsTitan() || PlayerIsRodeoingTitan(player)))
		return 2.2  // pliot phase shift
	return player.PhaseShiftTimePassed() + player.PhaseShiftTimeRemaining() + PS_THRESHOLD
}

bool function GetPSG_State( entity player ) {
	if (player.IsPlayer() && IsValid(player))
	{
		string pname = player.GetPlayerName()
		if ( pname in file.PSGlitching )
		{
			return file.PSGlitching[ pname ] > 0.5
		}
		// else
		// {
		// 	file.PSGlitching[ pname ] <- 0.0
		// printt(format("Waring: player %s not found in GetPSG_State", pname))
		// }
	}
	return false
}

// Remember to call GetPSG_State before
string function GetPSG_Message( entity player ) {
	string pname = player.GetPlayerName()
	float p = file.PSGlitching[ pname ]
	return GenerateMsgByP(pname, p)
}

string function GenerateMsgByP( string pname, float p ) {
	if ( p > 0.9 )
	{
		return format("[%s] "+Localize("#psgd_msg_strong")+"\n", pname)
	}
	else if ( p > 0.5 )
	{
		return format("[%s] "+Localize("#psgd_msg_weak")+"\n", pname)
	}
	return ""
}

void function ClearStatus()
{
	file.NextPSTime.clear()
	file.LastPSEnd.clear()
	file.LastPSStart.clear()
	file.PSGlitching.clear()
	file.PhaseShifting.clear()
	file.Initialized.clear()
	// file.running = false
	printt("#################")
	printt("Clearing status")
	printt("#################")
}
